// following were autogenerated by ./codegen/typed_source_generator.rb at 2013-09-19 16:39:09 -0700 do not edit
package com.twitter.scalding

trait TypedSource1[A] extends TypedSource[Tuple1[A]] {
  def converter[Z >: Tuple1[A]] = TupleConverter.asSuperConverter(TupleConverter.of[Tuple1[A]])
}

trait TypedSource2[A, B] extends TypedSource[Tuple2[A, B]] {
  def converter[Z >: Tuple2[A, B]] = TupleConverter.asSuperConverter(TupleConverter.of[Tuple2[A, B]])
}

trait TypedSource3[A, B, C] extends TypedSource[Tuple3[A, B, C]] {
  def converter[Z >: Tuple3[A, B, C]] = TupleConverter.asSuperConverter(TupleConverter.of[Tuple3[A, B, C]])
}

trait TypedSource4[A, B, C, D] extends TypedSource[Tuple4[A, B, C, D]] {
  def converter[Z >: Tuple4[A, B, C, D]] = TupleConverter.asSuperConverter(TupleConverter.of[Tuple4[A, B, C, D]])
}

trait TypedSource5[A, B, C, D, E] extends TypedSource[Tuple5[A, B, C, D, E]] {
  def converter[Z >: Tuple5[A, B, C, D, E]] = TupleConverter.asSuperConverter(TupleConverter.of[Tuple5[A, B, C, D, E]])
}

trait TypedSource6[A, B, C, D, E, F] extends TypedSource[Tuple6[A, B, C, D, E, F]] {
  def converter[Z >: Tuple6[A, B, C, D, E, F]] = TupleConverter.asSuperConverter(TupleConverter.of[Tuple6[A, B, C, D, E, F]])
}

trait TypedSource7[A, B, C, D, E, F, G] extends TypedSource[Tuple7[A, B, C, D, E, F, G]] {
  def converter[Z >: Tuple7[A, B, C, D, E, F, G]] = TupleConverter.asSuperConverter(TupleConverter.of[Tuple7[A, B, C, D, E, F, G]])
}

trait TypedSource8[A, B, C, D, E, F, G, H] extends TypedSource[Tuple8[A, B, C, D, E, F, G, H]] {
  def converter[Z >: Tuple8[A, B, C, D, E, F, G, H]] = TupleConverter.asSuperConverter(TupleConverter.of[Tuple8[A, B, C, D, E, F, G, H]])
}

trait TypedSource9[A, B, C, D, E, F, G, H, I] extends TypedSource[Tuple9[A, B, C, D, E, F, G, H, I]] {
  def converter[Z >: Tuple9[A, B, C, D, E, F, G, H, I]] = TupleConverter.asSuperConverter(TupleConverter.of[Tuple9[A, B, C, D, E, F, G, H, I]])
}

trait TypedSource10[A, B, C, D, E, F, G, H, I, J] extends TypedSource[Tuple10[A, B, C, D, E, F, G, H, I, J]] {
  def converter[Z >: Tuple10[A, B, C, D, E, F, G, H, I, J]] = TupleConverter.asSuperConverter(TupleConverter.of[Tuple10[A, B, C, D, E, F, G, H, I, J]])
}

trait TypedSource11[A, B, C, D, E, F, G, H, I, J, K] extends TypedSource[Tuple11[A, B, C, D, E, F, G, H, I, J, K]] {
  def converter[Z >: Tuple11[A, B, C, D, E, F, G, H, I, J, K]] = TupleConverter.asSuperConverter(TupleConverter.of[Tuple11[A, B, C, D, E, F, G, H, I, J, K]])
}

trait TypedSource12[A, B, C, D, E, F, G, H, I, J, K, L] extends TypedSource[Tuple12[A, B, C, D, E, F, G, H, I, J, K, L]] {
  def converter[Z >: Tuple12[A, B, C, D, E, F, G, H, I, J, K, L]] = TupleConverter.asSuperConverter(TupleConverter.of[Tuple12[A, B, C, D, E, F, G, H, I, J, K, L]])
}

trait TypedSource13[A, B, C, D, E, F, G, H, I, J, K, L, M] extends TypedSource[Tuple13[A, B, C, D, E, F, G, H, I, J, K, L, M]] {
  def converter[Z >: Tuple13[A, B, C, D, E, F, G, H, I, J, K, L, M]] = TupleConverter.asSuperConverter(TupleConverter.of[Tuple13[A, B, C, D, E, F, G, H, I, J, K, L, M]])
}

trait TypedSource14[A, B, C, D, E, F, G, H, I, J, K, L, M, N] extends TypedSource[Tuple14[A, B, C, D, E, F, G, H, I, J, K, L, M, N]] {
  def converter[Z >: Tuple14[A, B, C, D, E, F, G, H, I, J, K, L, M, N]] = TupleConverter.asSuperConverter(TupleConverter.of[Tuple14[A, B, C, D, E, F, G, H, I, J, K, L, M, N]])
}

trait TypedSource15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O] extends TypedSource[Tuple15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]] {
  def converter[Z >: Tuple15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]] = TupleConverter.asSuperConverter(TupleConverter.of[Tuple15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]])
}

trait TypedSource16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P] extends TypedSource[Tuple16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]] {
  def converter[Z >: Tuple16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]] = TupleConverter.asSuperConverter(TupleConverter.of[Tuple16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]])
}

trait TypedSource17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q] extends TypedSource[Tuple17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]] {
  def converter[Z >: Tuple17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]] = TupleConverter.asSuperConverter(TupleConverter.of[Tuple17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]])
}

trait TypedSource18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R] extends TypedSource[Tuple18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R]] {
  def converter[Z >: Tuple18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R]] = TupleConverter.asSuperConverter(TupleConverter.of[Tuple18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R]])
}

trait TypedSource19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S] extends TypedSource[Tuple19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S]] {
  def converter[Z >: Tuple19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S]] = TupleConverter.asSuperConverter(TupleConverter.of[Tuple19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S]])
}

trait TypedSource20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T] extends TypedSource[Tuple20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T]] {
  def converter[Z >: Tuple20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T]] = TupleConverter.asSuperConverter(TupleConverter.of[Tuple20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T]])
}

trait TypedSource21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U] extends TypedSource[Tuple21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U]] {
  def converter[Z >: Tuple21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U]] = TupleConverter.asSuperConverter(TupleConverter.of[Tuple21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U]])
}

trait TypedSource22[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V] extends TypedSource[Tuple22[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V]] {
  def converter[Z >: Tuple22[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V]] = TupleConverter.asSuperConverter(TupleConverter.of[Tuple22[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V]])
}

trait TypedSink1[A] extends TypedSink[Tuple1[A]] {
  final def setter[Z <: Tuple1[A]] = TupleSetter.asSubSetter(TupleSetter.of[Tuple1[A]])
}

trait TypedSink2[A, B] extends TypedSink[Tuple2[A, B]] {
  final def setter[Z <: Tuple2[A, B]] = TupleSetter.asSubSetter(TupleSetter.of[Tuple2[A, B]])
}

trait TypedSink3[A, B, C] extends TypedSink[Tuple3[A, B, C]] {
  final def setter[Z <: Tuple3[A, B, C]] = TupleSetter.asSubSetter(TupleSetter.of[Tuple3[A, B, C]])
}

trait TypedSink4[A, B, C, D] extends TypedSink[Tuple4[A, B, C, D]] {
  final def setter[Z <: Tuple4[A, B, C, D]] = TupleSetter.asSubSetter(TupleSetter.of[Tuple4[A, B, C, D]])
}

trait TypedSink5[A, B, C, D, E] extends TypedSink[Tuple5[A, B, C, D, E]] {
  final def setter[Z <: Tuple5[A, B, C, D, E]] = TupleSetter.asSubSetter(TupleSetter.of[Tuple5[A, B, C, D, E]])
}

trait TypedSink6[A, B, C, D, E, F] extends TypedSink[Tuple6[A, B, C, D, E, F]] {
  final def setter[Z <: Tuple6[A, B, C, D, E, F]] = TupleSetter.asSubSetter(TupleSetter.of[Tuple6[A, B, C, D, E, F]])
}

trait TypedSink7[A, B, C, D, E, F, G] extends TypedSink[Tuple7[A, B, C, D, E, F, G]] {
  final def setter[Z <: Tuple7[A, B, C, D, E, F, G]] = TupleSetter.asSubSetter(TupleSetter.of[Tuple7[A, B, C, D, E, F, G]])
}

trait TypedSink8[A, B, C, D, E, F, G, H] extends TypedSink[Tuple8[A, B, C, D, E, F, G, H]] {
  final def setter[Z <: Tuple8[A, B, C, D, E, F, G, H]] = TupleSetter.asSubSetter(TupleSetter.of[Tuple8[A, B, C, D, E, F, G, H]])
}

trait TypedSink9[A, B, C, D, E, F, G, H, I] extends TypedSink[Tuple9[A, B, C, D, E, F, G, H, I]] {
  final def setter[Z <: Tuple9[A, B, C, D, E, F, G, H, I]] = TupleSetter.asSubSetter(TupleSetter.of[Tuple9[A, B, C, D, E, F, G, H, I]])
}

trait TypedSink10[A, B, C, D, E, F, G, H, I, J] extends TypedSink[Tuple10[A, B, C, D, E, F, G, H, I, J]] {
  final def setter[Z <: Tuple10[A, B, C, D, E, F, G, H, I, J]] = TupleSetter.asSubSetter(TupleSetter.of[Tuple10[A, B, C, D, E, F, G, H, I, J]])
}

trait TypedSink11[A, B, C, D, E, F, G, H, I, J, K] extends TypedSink[Tuple11[A, B, C, D, E, F, G, H, I, J, K]] {
  final def setter[Z <: Tuple11[A, B, C, D, E, F, G, H, I, J, K]] = TupleSetter.asSubSetter(TupleSetter.of[Tuple11[A, B, C, D, E, F, G, H, I, J, K]])
}

trait TypedSink12[A, B, C, D, E, F, G, H, I, J, K, L] extends TypedSink[Tuple12[A, B, C, D, E, F, G, H, I, J, K, L]] {
  final def setter[Z <: Tuple12[A, B, C, D, E, F, G, H, I, J, K, L]] = TupleSetter.asSubSetter(TupleSetter.of[Tuple12[A, B, C, D, E, F, G, H, I, J, K, L]])
}

trait TypedSink13[A, B, C, D, E, F, G, H, I, J, K, L, M] extends TypedSink[Tuple13[A, B, C, D, E, F, G, H, I, J, K, L, M]] {
  final def setter[Z <: Tuple13[A, B, C, D, E, F, G, H, I, J, K, L, M]] = TupleSetter.asSubSetter(TupleSetter.of[Tuple13[A, B, C, D, E, F, G, H, I, J, K, L, M]])
}

trait TypedSink14[A, B, C, D, E, F, G, H, I, J, K, L, M, N] extends TypedSink[Tuple14[A, B, C, D, E, F, G, H, I, J, K, L, M, N]] {
  final def setter[Z <: Tuple14[A, B, C, D, E, F, G, H, I, J, K, L, M, N]] = TupleSetter.asSubSetter(TupleSetter.of[Tuple14[A, B, C, D, E, F, G, H, I, J, K, L, M, N]])
}

trait TypedSink15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O] extends TypedSink[Tuple15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]] {
  final def setter[Z <: Tuple15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]] = TupleSetter.asSubSetter(TupleSetter.of[Tuple15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]])
}

trait TypedSink16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P] extends TypedSink[Tuple16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]] {
  final def setter[Z <: Tuple16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]] = TupleSetter.asSubSetter(TupleSetter.of[Tuple16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]])
}

trait TypedSink17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q] extends TypedSink[Tuple17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]] {
  final def setter[Z <: Tuple17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]] = TupleSetter.asSubSetter(TupleSetter.of[Tuple17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]])
}

trait TypedSink18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R] extends TypedSink[Tuple18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R]] {
  final def setter[Z <: Tuple18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R]] = TupleSetter.asSubSetter(TupleSetter.of[Tuple18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R]])
}

trait TypedSink19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S] extends TypedSink[Tuple19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S]] {
  final def setter[Z <: Tuple19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S]] = TupleSetter.asSubSetter(TupleSetter.of[Tuple19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S]])
}

trait TypedSink20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T] extends TypedSink[Tuple20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T]] {
  final def setter[Z <: Tuple20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T]] = TupleSetter.asSubSetter(TupleSetter.of[Tuple20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T]])
}

trait TypedSink21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U] extends TypedSink[Tuple21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U]] {
  final def setter[Z <: Tuple21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U]] = TupleSetter.asSubSetter(TupleSetter.of[Tuple21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U]])
}

trait TypedSink22[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V] extends TypedSink[Tuple22[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V]] {
  final def setter[Z <: Tuple22[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V]] = TupleSetter.asSubSetter(TupleSetter.of[Tuple22[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V]])
}

// end of autogenerated
