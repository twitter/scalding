/**
 * Generated by Scrooge
 *   version: ?
 *   rev: ?
 *   built at: ?
 */
package com.twitter.scalding.commons.macros.scalathrift

import com.twitter.scrooge.ThriftEnum

@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
case object TestEnum {

  case object Zero extends com.twitter.scalding.commons.macros.scalathrift.TestEnum {
    val value = 0
    val name = "Zero"
    val originalName = "ZERO"
  }

  case object One extends com.twitter.scalding.commons.macros.scalathrift.TestEnum {
    val value = 1
    val name = "One"
    val originalName = "ONE"
  }

  case object Two extends com.twitter.scalding.commons.macros.scalathrift.TestEnum {
    val value = 2
    val name = "Two"
    val originalName = "TWO"
  }

  case object Large extends com.twitter.scalding.commons.macros.scalathrift.TestEnum {
    val value = 70000
    val name = "Large"
    val originalName = "LARGE"
  }

  case object Huge extends com.twitter.scalding.commons.macros.scalathrift.TestEnum {
    val value = 2147483647
    val name = "Huge"
    val originalName = "HUGE"
  }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * @throws NoSuchElementException if the value is not found.
   */
  def apply(value: Int): com.twitter.scalding.commons.macros.scalathrift.TestEnum = {
    value match {
      case 0 => com.twitter.scalding.commons.macros.scalathrift.TestEnum.Zero
      case 1 => com.twitter.scalding.commons.macros.scalathrift.TestEnum.One
      case 2 => com.twitter.scalding.commons.macros.scalathrift.TestEnum.Two
      case 70000 => com.twitter.scalding.commons.macros.scalathrift.TestEnum.Large
      case 2147483647 => com.twitter.scalding.commons.macros.scalathrift.TestEnum.Huge
      case _ => throw new NoSuchElementException(value.toString)
    }
  }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * Returns None if the value is not found
   */
  def get(value: Int): Option[com.twitter.scalding.commons.macros.scalathrift.TestEnum] = {
    value match {
      case 0 => scala.Some(com.twitter.scalding.commons.macros.scalathrift.TestEnum.Zero)
      case 1 => scala.Some(com.twitter.scalding.commons.macros.scalathrift.TestEnum.One)
      case 2 => scala.Some(com.twitter.scalding.commons.macros.scalathrift.TestEnum.Two)
      case 70000 => scala.Some(com.twitter.scalding.commons.macros.scalathrift.TestEnum.Large)
      case 2147483647 => scala.Some(com.twitter.scalding.commons.macros.scalathrift.TestEnum.Huge)
      case _ => scala.None
    }
  }

  def valueOf(name: String): Option[com.twitter.scalding.commons.macros.scalathrift.TestEnum] = {
    name.toLowerCase match {
      case "zero" => scala.Some(com.twitter.scalding.commons.macros.scalathrift.TestEnum.Zero)
      case "one" => scala.Some(com.twitter.scalding.commons.macros.scalathrift.TestEnum.One)
      case "two" => scala.Some(com.twitter.scalding.commons.macros.scalathrift.TestEnum.Two)
      case "large" => scala.Some(com.twitter.scalding.commons.macros.scalathrift.TestEnum.Large)
      case "huge" => scala.Some(com.twitter.scalding.commons.macros.scalathrift.TestEnum.Huge)
      case _ => scala.None
    }
  }

  lazy val list: List[com.twitter.scalding.commons.macros.scalathrift.TestEnum] = scala.List[com.twitter.scalding.commons.macros.scalathrift.TestEnum](
    com.twitter.scalding.commons.macros.scalathrift.TestEnum.Zero,
    com.twitter.scalding.commons.macros.scalathrift.TestEnum.One,
    com.twitter.scalding.commons.macros.scalathrift.TestEnum.Two,
    com.twitter.scalding.commons.macros.scalathrift.TestEnum.Large,
    com.twitter.scalding.commons.macros.scalathrift.TestEnum.Huge)
}

@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
sealed trait TestEnum extends ThriftEnum with Serializable