/**
 * Generated by Scrooge
 *   version: ?
 *   rev: ?
 *   built at: ?
 */
package com.twitter.scalding.commons.macros.scalathrift

import com.twitter.scrooge.{
  TFieldBlob,
  ThriftException,
  ThriftStruct,
  ThriftStructCodec3,
  ThriftStructFieldInfo,
  ThriftUtil
}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{ TMemoryBuffer, TTransport }
import java.nio.ByteBuffer
import java.util.Arrays
import scala.collection.immutable.{ Map => immutable$Map }
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer,
  Buffer => mutable$Buffer,
  HashMap => mutable$HashMap,
  HashSet => mutable$HashSet
}
import scala.collection.{ Map, Set }

object TestSerializationOrderItem extends ThriftStructCodec3[TestSerializationOrderItem] {
  private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
  val Struct = new TStruct("TestSerializationOrderItem")
  val AStringField = new TField("a_string", TType.STRING, 1)
  val AStringFieldManifest = implicitly[Manifest[String]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      AStringField,
      false,
      false,
      AStringFieldManifest,
      None,
      None,
      immutable$Map(),
      immutable$Map()))

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map[String, String]()

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: TestSerializationOrderItem) {
  }

  def withoutPassthroughFields(original: TestSerializationOrderItem): TestSerializationOrderItem =
    new Immutable(
      aString =
        {
          val field = original.aString
          field
        })

  override def encode(_item: TestSerializationOrderItem, _oproto: TProtocol) {
    _item.write(_oproto)
  }

  override def decode(_iprot: TProtocol): TestSerializationOrderItem = {
    var aString: String = null
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRING => {
                aString = readAStringValue(_iprot)
              }
              case _actualType =>
                val _expectedType = TType.STRING

                throw new TProtocolException(
                  "Received wrong type for field 'aString' (expected=%s, actual=%s).".format(
                    ttypeToHuman(_expectedType),
                    ttypeToHuman(_actualType)))
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new Immutable(
      aString,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result())
  }

  def apply(
    aString: String): TestSerializationOrderItem =
    new Immutable(
      aString)

  def unapply(_item: TestSerializationOrderItem): Option[String] = Some(_item.aString)

  private def readAStringValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  private def writeAStringField(aString_item: String, _oprot: TProtocol) {
    _oprot.writeFieldBegin(AStringField)
    writeAStringValue(aString_item, _oprot)
    _oprot.writeFieldEnd()
  }

  private def writeAStringValue(aString_item: String, _oprot: TProtocol) {
    _oprot.writeString(aString_item)
  }

  private def ttypeToHuman(byte: Byte) = {
    // from https://github.com/apache/thrift/blob/master/lib/java/src/org/apache/thrift/protocol/TType.java
    byte match {
      case TType.STOP => "STOP"
      case TType.VOID => "VOID"
      case TType.BOOL => "BOOL"
      case TType.BYTE => "BYTE"
      case TType.DOUBLE => "DOUBLE"
      case TType.I16 => "I16"
      case TType.I32 => "I32"
      case TType.I64 => "I64"
      case TType.STRING => "STRING"
      case TType.STRUCT => "STRUCT"
      case TType.MAP => "MAP"
      case TType.SET => "SET"
      case TType.LIST => "LIST"
      case TType.ENUM => "ENUM"
      case _ => "UNKNOWN"
    }
  }

  object Immutable extends ThriftStructCodec3[TestSerializationOrderItem] {
    override def encode(_item: TestSerializationOrderItem, _oproto: TProtocol) { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): TestSerializationOrderItem = TestSerializationOrderItem.decode(_iprot)
  }

  /**
   * The default read-only implementation of TestSerializationOrderItem.  You typically should not need to
   * directly reference this class; instead, use the TestSerializationOrderItem.apply method to construct
   * new instances.
   */
  class Immutable(
    val aString: String,
    override val _passthroughFields: immutable$Map[Short, TFieldBlob]) extends TestSerializationOrderItem {
    def this(
      aString: String) = this(
      aString,
      Map.empty)
  }

  /**
   * This Proxy trait allows you to extend the TestSerializationOrderItem trait with additional state or
   * behavior and implement the read-only methods from TestSerializationOrderItem using an underlying
   * instance.
   */
  trait Proxy extends TestSerializationOrderItem {
    protected def _underlying_TestSerializationOrderItem: TestSerializationOrderItem
    override def aString: String = _underlying_TestSerializationOrderItem.aString
    override def _passthroughFields = _underlying_TestSerializationOrderItem._passthroughFields
  }
}

trait TestSerializationOrderItem
  extends ThriftStruct
  with scala.Product1[String]
  with java.io.Serializable {
  import TestSerializationOrderItem._

  def aString: String

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1 = aString

  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returend.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) orElse {
      val _fieldOpt: Option[TField] =
        _fieldId match {
          case 1 =>
            if (aString ne null) {
              writeAStringValue(aString, _oprot)
              Some(TestSerializationOrderItem.AStringField)
            } else {
              None
            }
          case _ => None
        }
      _fieldOpt match {
        case Some(_field) =>
          val _data = Arrays.copyOfRange(_buff.getArray, 0, _buff.length)
          Some(TFieldBlob(_field, _data))
        case None =>
          None
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): TestSerializationOrderItem = {
    var aString: String = this.aString
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        aString = readAStringValue(_blob.read)
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      aString,
      _passthroughFields)
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is subtracked
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): TestSerializationOrderItem = {
    var aString: String = this.aString

    _fieldId match {
      case 1 =>
        aString = null
      case _ =>
    }
    new Immutable(
      aString,
      _passthroughFields - _fieldId)
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is subtracked
   * from the passthroughFields map, if present.
   */
  def unsetAString: TestSerializationOrderItem = unsetField(1)

  override def write(_oprot: TProtocol) {
    TestSerializationOrderItem.validate(this)
    _oprot.writeStructBegin(Struct)
    if (aString ne null) writeAStringField(aString, _oprot)
    _passthroughFields.values foreach { _.write(_oprot) }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    aString: String = this.aString,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields): TestSerializationOrderItem =
    new Immutable(
      aString,
      _passthroughFields)

  override def canEqual(other: Any): Boolean = other.isInstanceOf[TestSerializationOrderItem]

  override def equals(other: Any): Boolean =
    _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
      _passthroughFields == other.asInstanceOf[TestSerializationOrderItem]._passthroughFields

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)

  override def productArity: Int = 1

  override def productElement(n: Int): Any = n match {
    case 0 => this.aString
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "TestSerializationOrderItem"
}