/**
 * Generated by Scrooge
 *   version: ?
 *   rev: ?
 *   built at: ?
 */
package com.twitter.scalding.commons.macros.scalathrift

import com.twitter.scrooge.{
  TFieldBlob,
  ThriftException,
  ThriftStruct,
  ThriftStructCodec3,
  ThriftStructFieldInfo,
  ThriftUtil
}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{ TMemoryBuffer, TTransport }
import java.nio.ByteBuffer
import java.util.Arrays
import scala.collection.immutable.{ Map => immutable$Map }
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer,
  Buffer => mutable$Buffer,
  HashMap => mutable$HashMap,
  HashSet => mutable$HashSet
}
import scala.collection.{ Map, Set }

object TestSerializationOrder extends ThriftStructCodec3[TestSerializationOrder] {
  private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
  val Struct = new TStruct("TestSerializationOrder")
  val AStructSetField = new TField("a_struct_set", TType.SET, 1)
  val AStructSetFieldManifest = implicitly[Manifest[Set[TestSerializationOrderItem]]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      AStructSetField,
      false,
      false,
      AStructSetFieldManifest,
      None,
      Some(implicitly[Manifest[TestSerializationOrderItem]]),
      immutable$Map(),
      immutable$Map()))

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map[String, String]()

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: TestSerializationOrder) {
  }

  def withoutPassthroughFields(original: TestSerializationOrder): TestSerializationOrder =
    new Immutable(
      aStructSet =
        {
          val field = original.aStructSet
          field.map { field =>
            TestSerializationOrderItem.withoutPassthroughFields(field)
          }
        })

  override def encode(_item: TestSerializationOrder, _oproto: TProtocol) {
    _item.write(_oproto)
  }

  override def decode(_iprot: TProtocol): TestSerializationOrder = {
    var aStructSet: Set[TestSerializationOrderItem] = Set[TestSerializationOrderItem]()
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.SET => {
                aStructSet = readAStructSetValue(_iprot)
              }
              case _actualType =>
                val _expectedType = TType.SET

                throw new TProtocolException(
                  "Received wrong type for field 'aStructSet' (expected=%s, actual=%s).".format(
                    ttypeToHuman(_expectedType),
                    ttypeToHuman(_actualType)))
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new Immutable(
      aStructSet,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result())
  }

  def apply(
    aStructSet: Set[TestSerializationOrderItem] = Set[TestSerializationOrderItem]()): TestSerializationOrder =
    new Immutable(
      aStructSet)

  def unapply(_item: TestSerializationOrder): Option[Set[TestSerializationOrderItem]] = Some(_item.aStructSet)

  private def readAStructSetValue(_iprot: TProtocol): Set[TestSerializationOrderItem] = {
    val _set = _iprot.readSetBegin()
    if (_set.size == 0) {
      _iprot.readSetEnd()
      Set.empty[TestSerializationOrderItem]
    } else {
      val _rv = new mutable$HashSet[TestSerializationOrderItem]
      var _i = 0
      while (_i < _set.size) {
        _rv += {
          TestSerializationOrderItem.decode(_iprot)

        }
        _i += 1
      }
      _iprot.readSetEnd()
      _rv
    }
  }

  private def writeAStructSetField(aStructSet_item: Set[TestSerializationOrderItem], _oprot: TProtocol) {
    _oprot.writeFieldBegin(AStructSetField)
    writeAStructSetValue(aStructSet_item, _oprot)
    _oprot.writeFieldEnd()
  }

  private def writeAStructSetValue(aStructSet_item: Set[TestSerializationOrderItem], _oprot: TProtocol) {
    _oprot.writeSetBegin(new TSet(TType.STRUCT, aStructSet_item.size))
    aStructSet_item.foreach { aStructSet_item_element =>
      aStructSet_item_element.write(_oprot)
    }
    _oprot.writeSetEnd()
  }

  private def ttypeToHuman(byte: Byte) = {
    // from https://github.com/apache/thrift/blob/master/lib/java/src/org/apache/thrift/protocol/TType.java
    byte match {
      case TType.STOP => "STOP"
      case TType.VOID => "VOID"
      case TType.BOOL => "BOOL"
      case TType.BYTE => "BYTE"
      case TType.DOUBLE => "DOUBLE"
      case TType.I16 => "I16"
      case TType.I32 => "I32"
      case TType.I64 => "I64"
      case TType.STRING => "STRING"
      case TType.STRUCT => "STRUCT"
      case TType.MAP => "MAP"
      case TType.SET => "SET"
      case TType.LIST => "LIST"
      case TType.ENUM => "ENUM"
      case _ => "UNKNOWN"
    }
  }

  object Immutable extends ThriftStructCodec3[TestSerializationOrder] {
    override def encode(_item: TestSerializationOrder, _oproto: TProtocol) { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): TestSerializationOrder = TestSerializationOrder.decode(_iprot)
  }

  /**
   * The default read-only implementation of TestSerializationOrder.  You typically should not need to
   * directly reference this class; instead, use the TestSerializationOrder.apply method to construct
   * new instances.
   */
  class Immutable(
    val aStructSet: Set[TestSerializationOrderItem],
    override val _passthroughFields: immutable$Map[Short, TFieldBlob]) extends TestSerializationOrder {
    def this(
      aStructSet: Set[TestSerializationOrderItem] = Set[TestSerializationOrderItem]()) = this(
      aStructSet,
      Map.empty)
  }

  /**
   * This Proxy trait allows you to extend the TestSerializationOrder trait with additional state or
   * behavior and implement the read-only methods from TestSerializationOrder using an underlying
   * instance.
   */
  trait Proxy extends TestSerializationOrder {
    protected def _underlying_TestSerializationOrder: TestSerializationOrder
    override def aStructSet: Set[TestSerializationOrderItem] = _underlying_TestSerializationOrder.aStructSet
    override def _passthroughFields = _underlying_TestSerializationOrder._passthroughFields
  }
}

trait TestSerializationOrder
  extends ThriftStruct
  with scala.Product1[Set[TestSerializationOrderItem]]
  with java.io.Serializable {
  import TestSerializationOrder._

  def aStructSet: Set[TestSerializationOrderItem]

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1 = aStructSet

  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returend.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) orElse {
      val _fieldOpt: Option[TField] =
        _fieldId match {
          case 1 =>
            if (aStructSet ne null) {
              writeAStructSetValue(aStructSet, _oprot)
              Some(TestSerializationOrder.AStructSetField)
            } else {
              None
            }
          case _ => None
        }
      _fieldOpt match {
        case Some(_field) =>
          val _data = Arrays.copyOfRange(_buff.getArray, 0, _buff.length)
          Some(TFieldBlob(_field, _data))
        case None =>
          None
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): TestSerializationOrder = {
    var aStructSet: Set[TestSerializationOrderItem] = this.aStructSet
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        aStructSet = readAStructSetValue(_blob.read)
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      aStructSet,
      _passthroughFields)
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is subtracked
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): TestSerializationOrder = {
    var aStructSet: Set[TestSerializationOrderItem] = this.aStructSet

    _fieldId match {
      case 1 =>
        aStructSet = Set[TestSerializationOrderItem]()
      case _ =>
    }
    new Immutable(
      aStructSet,
      _passthroughFields - _fieldId)
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is subtracked
   * from the passthroughFields map, if present.
   */
  def unsetAStructSet: TestSerializationOrder = unsetField(1)

  override def write(_oprot: TProtocol) {
    TestSerializationOrder.validate(this)
    _oprot.writeStructBegin(Struct)
    if (aStructSet ne null) writeAStructSetField(aStructSet, _oprot)
    _passthroughFields.values foreach { _.write(_oprot) }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    aStructSet: Set[TestSerializationOrderItem] = this.aStructSet,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields): TestSerializationOrder =
    new Immutable(
      aStructSet,
      _passthroughFields)

  override def canEqual(other: Any): Boolean = other.isInstanceOf[TestSerializationOrder]

  override def equals(other: Any): Boolean =
    _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
      _passthroughFields == other.asInstanceOf[TestSerializationOrder]._passthroughFields

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)

  override def productArity: Int = 1

  override def productElement(n: Int): Any = n match {
    case 0 => this.aStructSet
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "TestSerializationOrder"
}