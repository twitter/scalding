/**
 * Generated by Scrooge
 *   version: ?
 *   rev: ?
 *   built at: ?
 */
package com.twitter.scalding.commons.macros.scalathrift

import com.twitter.scrooge.{
  TFieldBlob,
  ThriftException,
  ThriftStruct,
  ThriftStructCodec3,
  ThriftStructFieldInfo,
  ThriftUtil
}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{ TMemoryBuffer, TTransport }
import java.nio.ByteBuffer
import java.util.Arrays
import scala.collection.immutable.{ Map => immutable$Map }
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer,
  Buffer => mutable$Buffer,
  HashMap => mutable$HashMap,
  HashSet => mutable$HashSet
}
import scala.collection.{ Map, Set }

object TestSets extends ThriftStructCodec3[TestSets] {
  private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
  val Struct = new TStruct("TestSets")
  val ABoolSetField = new TField("a_bool_set", TType.SET, 1)
  val ABoolSetFieldManifest = implicitly[Manifest[Set[Boolean]]]
  val AByteSetField = new TField("a_byte_set", TType.SET, 2)
  val AByteSetFieldManifest = implicitly[Manifest[Set[Byte]]]
  val AI16SetField = new TField("a_i16_set", TType.SET, 3)
  val AI16SetFieldManifest = implicitly[Manifest[Set[Short]]]
  val AI32SetField = new TField("a_i32_set", TType.SET, 4)
  val AI32SetFieldManifest = implicitly[Manifest[Set[Int]]]
  val AI64SetField = new TField("a_i64_set", TType.SET, 5)
  val AI64SetFieldManifest = implicitly[Manifest[Set[Long]]]
  val ADoubleSetField = new TField("a_double_set", TType.SET, 6)
  val ADoubleSetFieldManifest = implicitly[Manifest[Set[Double]]]
  val AStringSetField = new TField("a_string_set", TType.SET, 7)
  val AStringSetFieldManifest = implicitly[Manifest[Set[String]]]
  val AStructSetField = new TField("a_struct_set", TType.SET, 8)
  val AStructSetFieldManifest = implicitly[Manifest[Set[TestStruct]]]
  val AListSetField = new TField("a_list_set", TType.SET, 9)
  val AListSetFieldManifest = implicitly[Manifest[Set[Seq[String]]]]
  val ASetSetField = new TField("a_set_set", TType.SET, 10)
  val ASetSetFieldManifest = implicitly[Manifest[Set[Set[String]]]]
  val AMapSetField = new TField("a_map_set", TType.SET, 11)
  val AMapSetFieldManifest = implicitly[Manifest[Set[Map[Int, Int]]]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      ABoolSetField,
      false,
      false,
      ABoolSetFieldManifest,
      None,
      Some(implicitly[Manifest[Boolean]]),
      immutable$Map(),
      immutable$Map()),
    new ThriftStructFieldInfo(
      AByteSetField,
      false,
      false,
      AByteSetFieldManifest,
      None,
      Some(implicitly[Manifest[Byte]]),
      immutable$Map(),
      immutable$Map()),
    new ThriftStructFieldInfo(
      AI16SetField,
      false,
      false,
      AI16SetFieldManifest,
      None,
      Some(implicitly[Manifest[Short]]),
      immutable$Map(),
      immutable$Map()),
    new ThriftStructFieldInfo(
      AI32SetField,
      false,
      false,
      AI32SetFieldManifest,
      None,
      Some(implicitly[Manifest[Int]]),
      immutable$Map(),
      immutable$Map()),
    new ThriftStructFieldInfo(
      AI64SetField,
      false,
      false,
      AI64SetFieldManifest,
      None,
      Some(implicitly[Manifest[Long]]),
      immutable$Map(),
      immutable$Map()),
    new ThriftStructFieldInfo(
      ADoubleSetField,
      false,
      false,
      ADoubleSetFieldManifest,
      None,
      Some(implicitly[Manifest[Double]]),
      immutable$Map(),
      immutable$Map()),
    new ThriftStructFieldInfo(
      AStringSetField,
      false,
      false,
      AStringSetFieldManifest,
      None,
      Some(implicitly[Manifest[String]]),
      immutable$Map(),
      immutable$Map()),
    new ThriftStructFieldInfo(
      AStructSetField,
      false,
      false,
      AStructSetFieldManifest,
      None,
      Some(implicitly[Manifest[TestStruct]]),
      immutable$Map(),
      immutable$Map()),
    new ThriftStructFieldInfo(
      AListSetField,
      false,
      false,
      AListSetFieldManifest,
      None,
      Some(implicitly[Manifest[Seq[String]]]),
      immutable$Map(),
      immutable$Map()),
    new ThriftStructFieldInfo(
      ASetSetField,
      false,
      false,
      ASetSetFieldManifest,
      None,
      Some(implicitly[Manifest[Set[String]]]),
      immutable$Map(),
      immutable$Map()),
    new ThriftStructFieldInfo(
      AMapSetField,
      false,
      false,
      AMapSetFieldManifest,
      None,
      Some(implicitly[Manifest[Map[Int, Int]]]),
      immutable$Map(),
      immutable$Map()))

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map[String, String]()

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: TestSets) {
  }

  def withoutPassthroughFields(original: TestSets): TestSets =
    new Immutable(
      aBoolSet =
        {
          val field = original.aBoolSet
          field.map { field =>
            field
          }
        },
      aByteSet =
        {
          val field = original.aByteSet
          field.map { field =>
            field
          }
        },
      aI16Set =
        {
          val field = original.aI16Set
          field.map { field =>
            field
          }
        },
      aI32Set =
        {
          val field = original.aI32Set
          field.map { field =>
            field
          }
        },
      aI64Set =
        {
          val field = original.aI64Set
          field.map { field =>
            field
          }
        },
      aDoubleSet =
        {
          val field = original.aDoubleSet
          field.map { field =>
            field
          }
        },
      aStringSet =
        {
          val field = original.aStringSet
          field.map { field =>
            field
          }
        },
      aStructSet =
        {
          val field = original.aStructSet
          field.map { field =>
            TestStruct.withoutPassthroughFields(field)
          }
        },
      aListSet =
        {
          val field = original.aListSet
          field.map { field =>
            field.map { field =>
              field
            }
          }
        },
      aSetSet =
        {
          val field = original.aSetSet
          field.map { field =>
            field.map { field =>
              field
            }
          }
        },
      aMapSet =
        {
          val field = original.aMapSet
          field.map { field =>
            field.map {
              case (key, value) =>
                val newKey = {
                  val field = key
                  field
                }

                val newValue = {
                  val field = value
                  field
                }

                newKey -> newValue
            }
          }
        })

  override def encode(_item: TestSets, _oproto: TProtocol) {
    _item.write(_oproto)
  }

  override def decode(_iprot: TProtocol): TestSets = {
    var aBoolSet: Set[Boolean] = Set[Boolean]()
    var aByteSet: Set[Byte] = Set[Byte]()
    var aI16Set: Set[Short] = Set[Short]()
    var aI32Set: Set[Int] = Set[Int]()
    var aI64Set: Set[Long] = Set[Long]()
    var aDoubleSet: Set[Double] = Set[Double]()
    var aStringSet: Set[String] = Set[String]()
    var aStructSet: Set[TestStruct] = Set[TestStruct]()
    var aListSet: Set[Seq[String]] = Set[Seq[String]]()
    var aSetSet: Set[Set[String]] = Set[Set[String]]()
    var aMapSet: Set[Map[Int, Int]] = Set[Map[Int, Int]]()
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.SET => {
                aBoolSet = readABoolSetValue(_iprot)
              }
              case _actualType =>
                val _expectedType = TType.SET

                throw new TProtocolException(
                  "Received wrong type for field 'aBoolSet' (expected=%s, actual=%s).".format(
                    ttypeToHuman(_expectedType),
                    ttypeToHuman(_actualType)))
            }
          case 2 =>
            _field.`type` match {
              case TType.SET => {
                aByteSet = readAByteSetValue(_iprot)
              }
              case _actualType =>
                val _expectedType = TType.SET

                throw new TProtocolException(
                  "Received wrong type for field 'aByteSet' (expected=%s, actual=%s).".format(
                    ttypeToHuman(_expectedType),
                    ttypeToHuman(_actualType)))
            }
          case 3 =>
            _field.`type` match {
              case TType.SET => {
                aI16Set = readAI16SetValue(_iprot)
              }
              case _actualType =>
                val _expectedType = TType.SET

                throw new TProtocolException(
                  "Received wrong type for field 'aI16Set' (expected=%s, actual=%s).".format(
                    ttypeToHuman(_expectedType),
                    ttypeToHuman(_actualType)))
            }
          case 4 =>
            _field.`type` match {
              case TType.SET => {
                aI32Set = readAI32SetValue(_iprot)
              }
              case _actualType =>
                val _expectedType = TType.SET

                throw new TProtocolException(
                  "Received wrong type for field 'aI32Set' (expected=%s, actual=%s).".format(
                    ttypeToHuman(_expectedType),
                    ttypeToHuman(_actualType)))
            }
          case 5 =>
            _field.`type` match {
              case TType.SET => {
                aI64Set = readAI64SetValue(_iprot)
              }
              case _actualType =>
                val _expectedType = TType.SET

                throw new TProtocolException(
                  "Received wrong type for field 'aI64Set' (expected=%s, actual=%s).".format(
                    ttypeToHuman(_expectedType),
                    ttypeToHuman(_actualType)))
            }
          case 6 =>
            _field.`type` match {
              case TType.SET => {
                aDoubleSet = readADoubleSetValue(_iprot)
              }
              case _actualType =>
                val _expectedType = TType.SET

                throw new TProtocolException(
                  "Received wrong type for field 'aDoubleSet' (expected=%s, actual=%s).".format(
                    ttypeToHuman(_expectedType),
                    ttypeToHuman(_actualType)))
            }
          case 7 =>
            _field.`type` match {
              case TType.SET => {
                aStringSet = readAStringSetValue(_iprot)
              }
              case _actualType =>
                val _expectedType = TType.SET

                throw new TProtocolException(
                  "Received wrong type for field 'aStringSet' (expected=%s, actual=%s).".format(
                    ttypeToHuman(_expectedType),
                    ttypeToHuman(_actualType)))
            }
          case 8 =>
            _field.`type` match {
              case TType.SET => {
                aStructSet = readAStructSetValue(_iprot)
              }
              case _actualType =>
                val _expectedType = TType.SET

                throw new TProtocolException(
                  "Received wrong type for field 'aStructSet' (expected=%s, actual=%s).".format(
                    ttypeToHuman(_expectedType),
                    ttypeToHuman(_actualType)))
            }
          case 9 =>
            _field.`type` match {
              case TType.SET => {
                aListSet = readAListSetValue(_iprot)
              }
              case _actualType =>
                val _expectedType = TType.SET

                throw new TProtocolException(
                  "Received wrong type for field 'aListSet' (expected=%s, actual=%s).".format(
                    ttypeToHuman(_expectedType),
                    ttypeToHuman(_actualType)))
            }
          case 10 =>
            _field.`type` match {
              case TType.SET => {
                aSetSet = readASetSetValue(_iprot)
              }
              case _actualType =>
                val _expectedType = TType.SET

                throw new TProtocolException(
                  "Received wrong type for field 'aSetSet' (expected=%s, actual=%s).".format(
                    ttypeToHuman(_expectedType),
                    ttypeToHuman(_actualType)))
            }
          case 11 =>
            _field.`type` match {
              case TType.SET => {
                aMapSet = readAMapSetValue(_iprot)
              }
              case _actualType =>
                val _expectedType = TType.SET

                throw new TProtocolException(
                  "Received wrong type for field 'aMapSet' (expected=%s, actual=%s).".format(
                    ttypeToHuman(_expectedType),
                    ttypeToHuman(_actualType)))
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new Immutable(
      aBoolSet,
      aByteSet,
      aI16Set,
      aI32Set,
      aI64Set,
      aDoubleSet,
      aStringSet,
      aStructSet,
      aListSet,
      aSetSet,
      aMapSet,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result())
  }

  def apply(
    aBoolSet: Set[Boolean] = Set[Boolean](),
    aByteSet: Set[Byte] = Set[Byte](),
    aI16Set: Set[Short] = Set[Short](),
    aI32Set: Set[Int] = Set[Int](),
    aI64Set: Set[Long] = Set[Long](),
    aDoubleSet: Set[Double] = Set[Double](),
    aStringSet: Set[String] = Set[String](),
    aStructSet: Set[TestStruct] = Set[TestStruct](),
    aListSet: Set[Seq[String]] = Set[Seq[String]](),
    aSetSet: Set[Set[String]] = Set[Set[String]](),
    aMapSet: Set[Map[Int, Int]] = Set[Map[Int, Int]]()): TestSets =
    new Immutable(
      aBoolSet,
      aByteSet,
      aI16Set,
      aI32Set,
      aI64Set,
      aDoubleSet,
      aStringSet,
      aStructSet,
      aListSet,
      aSetSet,
      aMapSet)

  def unapply(_item: TestSets): Option[scala.Product11[Set[Boolean], Set[Byte], Set[Short], Set[Int], Set[Long], Set[Double], Set[String], Set[TestStruct], Set[Seq[String]], Set[Set[String]], Set[Map[Int, Int]]]] = Some(_item)

  private def readABoolSetValue(_iprot: TProtocol): Set[Boolean] = {
    val _set = _iprot.readSetBegin()
    if (_set.size == 0) {
      _iprot.readSetEnd()
      Set.empty[Boolean]
    } else {
      val _rv = new mutable$HashSet[Boolean]
      var _i = 0
      while (_i < _set.size) {
        _rv += {
          _iprot.readBool()

        }
        _i += 1
      }
      _iprot.readSetEnd()
      _rv
    }
  }

  private def writeABoolSetField(aBoolSet_item: Set[Boolean], _oprot: TProtocol) {
    _oprot.writeFieldBegin(ABoolSetField)
    writeABoolSetValue(aBoolSet_item, _oprot)
    _oprot.writeFieldEnd()
  }

  private def writeABoolSetValue(aBoolSet_item: Set[Boolean], _oprot: TProtocol) {
    _oprot.writeSetBegin(new TSet(TType.BOOL, aBoolSet_item.size))
    aBoolSet_item.foreach { aBoolSet_item_element =>
      _oprot.writeBool(aBoolSet_item_element)
    }
    _oprot.writeSetEnd()
  }

  private def readAByteSetValue(_iprot: TProtocol): Set[Byte] = {
    val _set = _iprot.readSetBegin()
    if (_set.size == 0) {
      _iprot.readSetEnd()
      Set.empty[Byte]
    } else {
      val _rv = new mutable$HashSet[Byte]
      var _i = 0
      while (_i < _set.size) {
        _rv += {
          _iprot.readByte()

        }
        _i += 1
      }
      _iprot.readSetEnd()
      _rv
    }
  }

  private def writeAByteSetField(aByteSet_item: Set[Byte], _oprot: TProtocol) {
    _oprot.writeFieldBegin(AByteSetField)
    writeAByteSetValue(aByteSet_item, _oprot)
    _oprot.writeFieldEnd()
  }

  private def writeAByteSetValue(aByteSet_item: Set[Byte], _oprot: TProtocol) {
    _oprot.writeSetBegin(new TSet(TType.BYTE, aByteSet_item.size))
    aByteSet_item.foreach { aByteSet_item_element =>
      _oprot.writeByte(aByteSet_item_element)
    }
    _oprot.writeSetEnd()
  }

  private def readAI16SetValue(_iprot: TProtocol): Set[Short] = {
    val _set = _iprot.readSetBegin()
    if (_set.size == 0) {
      _iprot.readSetEnd()
      Set.empty[Short]
    } else {
      val _rv = new mutable$HashSet[Short]
      var _i = 0
      while (_i < _set.size) {
        _rv += {
          _iprot.readI16()

        }
        _i += 1
      }
      _iprot.readSetEnd()
      _rv
    }
  }

  private def writeAI16SetField(aI16Set_item: Set[Short], _oprot: TProtocol) {
    _oprot.writeFieldBegin(AI16SetField)
    writeAI16SetValue(aI16Set_item, _oprot)
    _oprot.writeFieldEnd()
  }

  private def writeAI16SetValue(aI16Set_item: Set[Short], _oprot: TProtocol) {
    _oprot.writeSetBegin(new TSet(TType.I16, aI16Set_item.size))
    aI16Set_item.foreach { aI16Set_item_element =>
      _oprot.writeI16(aI16Set_item_element)
    }
    _oprot.writeSetEnd()
  }

  private def readAI32SetValue(_iprot: TProtocol): Set[Int] = {
    val _set = _iprot.readSetBegin()
    if (_set.size == 0) {
      _iprot.readSetEnd()
      Set.empty[Int]
    } else {
      val _rv = new mutable$HashSet[Int]
      var _i = 0
      while (_i < _set.size) {
        _rv += {
          _iprot.readI32()

        }
        _i += 1
      }
      _iprot.readSetEnd()
      _rv
    }
  }

  private def writeAI32SetField(aI32Set_item: Set[Int], _oprot: TProtocol) {
    _oprot.writeFieldBegin(AI32SetField)
    writeAI32SetValue(aI32Set_item, _oprot)
    _oprot.writeFieldEnd()
  }

  private def writeAI32SetValue(aI32Set_item: Set[Int], _oprot: TProtocol) {
    _oprot.writeSetBegin(new TSet(TType.I32, aI32Set_item.size))
    aI32Set_item.foreach { aI32Set_item_element =>
      _oprot.writeI32(aI32Set_item_element)
    }
    _oprot.writeSetEnd()
  }

  private def readAI64SetValue(_iprot: TProtocol): Set[Long] = {
    val _set = _iprot.readSetBegin()
    if (_set.size == 0) {
      _iprot.readSetEnd()
      Set.empty[Long]
    } else {
      val _rv = new mutable$HashSet[Long]
      var _i = 0
      while (_i < _set.size) {
        _rv += {
          _iprot.readI64()

        }
        _i += 1
      }
      _iprot.readSetEnd()
      _rv
    }
  }

  private def writeAI64SetField(aI64Set_item: Set[Long], _oprot: TProtocol) {
    _oprot.writeFieldBegin(AI64SetField)
    writeAI64SetValue(aI64Set_item, _oprot)
    _oprot.writeFieldEnd()
  }

  private def writeAI64SetValue(aI64Set_item: Set[Long], _oprot: TProtocol) {
    _oprot.writeSetBegin(new TSet(TType.I64, aI64Set_item.size))
    aI64Set_item.foreach { aI64Set_item_element =>
      _oprot.writeI64(aI64Set_item_element)
    }
    _oprot.writeSetEnd()
  }

  private def readADoubleSetValue(_iprot: TProtocol): Set[Double] = {
    val _set = _iprot.readSetBegin()
    if (_set.size == 0) {
      _iprot.readSetEnd()
      Set.empty[Double]
    } else {
      val _rv = new mutable$HashSet[Double]
      var _i = 0
      while (_i < _set.size) {
        _rv += {
          _iprot.readDouble()

        }
        _i += 1
      }
      _iprot.readSetEnd()
      _rv
    }
  }

  private def writeADoubleSetField(aDoubleSet_item: Set[Double], _oprot: TProtocol) {
    _oprot.writeFieldBegin(ADoubleSetField)
    writeADoubleSetValue(aDoubleSet_item, _oprot)
    _oprot.writeFieldEnd()
  }

  private def writeADoubleSetValue(aDoubleSet_item: Set[Double], _oprot: TProtocol) {
    _oprot.writeSetBegin(new TSet(TType.DOUBLE, aDoubleSet_item.size))
    aDoubleSet_item.foreach { aDoubleSet_item_element =>
      _oprot.writeDouble(aDoubleSet_item_element)
    }
    _oprot.writeSetEnd()
  }

  private def readAStringSetValue(_iprot: TProtocol): Set[String] = {
    val _set = _iprot.readSetBegin()
    if (_set.size == 0) {
      _iprot.readSetEnd()
      Set.empty[String]
    } else {
      val _rv = new mutable$HashSet[String]
      var _i = 0
      while (_i < _set.size) {
        _rv += {
          _iprot.readString()

        }
        _i += 1
      }
      _iprot.readSetEnd()
      _rv
    }
  }

  private def writeAStringSetField(aStringSet_item: Set[String], _oprot: TProtocol) {
    _oprot.writeFieldBegin(AStringSetField)
    writeAStringSetValue(aStringSet_item, _oprot)
    _oprot.writeFieldEnd()
  }

  private def writeAStringSetValue(aStringSet_item: Set[String], _oprot: TProtocol) {
    _oprot.writeSetBegin(new TSet(TType.STRING, aStringSet_item.size))
    aStringSet_item.foreach { aStringSet_item_element =>
      _oprot.writeString(aStringSet_item_element)
    }
    _oprot.writeSetEnd()
  }

  private def readAStructSetValue(_iprot: TProtocol): Set[TestStruct] = {
    val _set = _iprot.readSetBegin()
    if (_set.size == 0) {
      _iprot.readSetEnd()
      Set.empty[TestStruct]
    } else {
      val _rv = new mutable$HashSet[TestStruct]
      var _i = 0
      while (_i < _set.size) {
        _rv += {
          TestStruct.decode(_iprot)

        }
        _i += 1
      }
      _iprot.readSetEnd()
      _rv
    }
  }

  private def writeAStructSetField(aStructSet_item: Set[TestStruct], _oprot: TProtocol) {
    _oprot.writeFieldBegin(AStructSetField)
    writeAStructSetValue(aStructSet_item, _oprot)
    _oprot.writeFieldEnd()
  }

  private def writeAStructSetValue(aStructSet_item: Set[TestStruct], _oprot: TProtocol) {
    _oprot.writeSetBegin(new TSet(TType.STRUCT, aStructSet_item.size))
    aStructSet_item.foreach { aStructSet_item_element =>
      aStructSet_item_element.write(_oprot)
    }
    _oprot.writeSetEnd()
  }

  private def readAListSetValue(_iprot: TProtocol): Set[Seq[String]] = {
    val _set = _iprot.readSetBegin()
    if (_set.size == 0) {
      _iprot.readSetEnd()
      Set.empty[Seq[String]]
    } else {
      val _rv = new mutable$HashSet[Seq[String]]
      var _i = 0
      while (_i < _set.size) {
        _rv += {
          val _list = _iprot.readListBegin()
          if (_list.size == 0) {
            _iprot.readListEnd()
            Nil
          } else {
            val _rv = new mutable$ArrayBuffer[String](_list.size)
            var _i = 0
            while (_i < _list.size) {
              _rv += {
                _iprot.readString()

              }
              _i += 1
            }
            _iprot.readListEnd()
            _rv
          }

        }
        _i += 1
      }
      _iprot.readSetEnd()
      _rv
    }
  }

  private def writeAListSetField(aListSet_item: Set[Seq[String]], _oprot: TProtocol) {
    _oprot.writeFieldBegin(AListSetField)
    writeAListSetValue(aListSet_item, _oprot)
    _oprot.writeFieldEnd()
  }

  private def writeAListSetValue(aListSet_item: Set[Seq[String]], _oprot: TProtocol) {
    _oprot.writeSetBegin(new TSet(TType.LIST, aListSet_item.size))
    aListSet_item.foreach { aListSet_item_element =>
      _oprot.writeListBegin(new TList(TType.STRING, aListSet_item_element.size))
      aListSet_item_element.foreach { aListSet_item_element_element =>
        _oprot.writeString(aListSet_item_element_element)
      }
      _oprot.writeListEnd()
    }
    _oprot.writeSetEnd()
  }

  private def readASetSetValue(_iprot: TProtocol): Set[Set[String]] = {
    val _set = _iprot.readSetBegin()
    if (_set.size == 0) {
      _iprot.readSetEnd()
      Set.empty[Set[String]]
    } else {
      val _rv = new mutable$HashSet[Set[String]]
      var _i = 0
      while (_i < _set.size) {
        _rv += {
          val _set = _iprot.readSetBegin()
          if (_set.size == 0) {
            _iprot.readSetEnd()
            Set.empty[String]
          } else {
            val _rv = new mutable$HashSet[String]
            var _i = 0
            while (_i < _set.size) {
              _rv += {
                _iprot.readString()

              }
              _i += 1
            }
            _iprot.readSetEnd()
            _rv
          }

        }
        _i += 1
      }
      _iprot.readSetEnd()
      _rv
    }
  }

  private def writeASetSetField(aSetSet_item: Set[Set[String]], _oprot: TProtocol) {
    _oprot.writeFieldBegin(ASetSetField)
    writeASetSetValue(aSetSet_item, _oprot)
    _oprot.writeFieldEnd()
  }

  private def writeASetSetValue(aSetSet_item: Set[Set[String]], _oprot: TProtocol) {
    _oprot.writeSetBegin(new TSet(TType.SET, aSetSet_item.size))
    aSetSet_item.foreach { aSetSet_item_element =>
      _oprot.writeSetBegin(new TSet(TType.STRING, aSetSet_item_element.size))
      aSetSet_item_element.foreach { aSetSet_item_element_element =>
        _oprot.writeString(aSetSet_item_element_element)
      }
      _oprot.writeSetEnd()
    }
    _oprot.writeSetEnd()
  }

  private def readAMapSetValue(_iprot: TProtocol): Set[Map[Int, Int]] = {
    val _set = _iprot.readSetBegin()
    if (_set.size == 0) {
      _iprot.readSetEnd()
      Set.empty[Map[Int, Int]]
    } else {
      val _rv = new mutable$HashSet[Map[Int, Int]]
      var _i = 0
      while (_i < _set.size) {
        _rv += {
          val _map = _iprot.readMapBegin()
          if (_map.size == 0) {
            _iprot.readMapEnd()
            Map.empty[Int, Int]
          } else {
            val _rv = new mutable$HashMap[Int, Int]
            var _i = 0
            while (_i < _map.size) {
              val _key = {
                _iprot.readI32()

              }
              val _value = {
                _iprot.readI32()

              }
              _rv(_key) = _value
              _i += 1
            }
            _iprot.readMapEnd()
            _rv
          }

        }
        _i += 1
      }
      _iprot.readSetEnd()
      _rv
    }
  }

  private def writeAMapSetField(aMapSet_item: Set[Map[Int, Int]], _oprot: TProtocol) {
    _oprot.writeFieldBegin(AMapSetField)
    writeAMapSetValue(aMapSet_item, _oprot)
    _oprot.writeFieldEnd()
  }

  private def writeAMapSetValue(aMapSet_item: Set[Map[Int, Int]], _oprot: TProtocol) {
    _oprot.writeSetBegin(new TSet(TType.MAP, aMapSet_item.size))
    aMapSet_item.foreach { aMapSet_item_element =>
      _oprot.writeMapBegin(new TMap(TType.I32, TType.I32, aMapSet_item_element.size))
      aMapSet_item_element.foreach { _pair =>
        val aMapSet_item_element_key = _pair._1
        val aMapSet_item_element_value = _pair._2
        _oprot.writeI32(aMapSet_item_element_key)
        _oprot.writeI32(aMapSet_item_element_value)
      }
      _oprot.writeMapEnd()
    }
    _oprot.writeSetEnd()
  }

  private def ttypeToHuman(byte: Byte) = {
    // from https://github.com/apache/thrift/blob/master/lib/java/src/org/apache/thrift/protocol/TType.java
    byte match {
      case TType.STOP => "STOP"
      case TType.VOID => "VOID"
      case TType.BOOL => "BOOL"
      case TType.BYTE => "BYTE"
      case TType.DOUBLE => "DOUBLE"
      case TType.I16 => "I16"
      case TType.I32 => "I32"
      case TType.I64 => "I64"
      case TType.STRING => "STRING"
      case TType.STRUCT => "STRUCT"
      case TType.MAP => "MAP"
      case TType.SET => "SET"
      case TType.LIST => "LIST"
      case TType.ENUM => "ENUM"
      case _ => "UNKNOWN"
    }
  }

  object Immutable extends ThriftStructCodec3[TestSets] {
    override def encode(_item: TestSets, _oproto: TProtocol) { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): TestSets = TestSets.decode(_iprot)
  }

  /**
   * The default read-only implementation of TestSets.  You typically should not need to
   * directly reference this class; instead, use the TestSets.apply method to construct
   * new instances.
   */
  class Immutable(
    val aBoolSet: Set[Boolean],
    val aByteSet: Set[Byte],
    val aI16Set: Set[Short],
    val aI32Set: Set[Int],
    val aI64Set: Set[Long],
    val aDoubleSet: Set[Double],
    val aStringSet: Set[String],
    val aStructSet: Set[TestStruct],
    val aListSet: Set[Seq[String]],
    val aSetSet: Set[Set[String]],
    val aMapSet: Set[Map[Int, Int]],
    override val _passthroughFields: immutable$Map[Short, TFieldBlob]) extends TestSets {
    def this(
      aBoolSet: Set[Boolean] = Set[Boolean](),
      aByteSet: Set[Byte] = Set[Byte](),
      aI16Set: Set[Short] = Set[Short](),
      aI32Set: Set[Int] = Set[Int](),
      aI64Set: Set[Long] = Set[Long](),
      aDoubleSet: Set[Double] = Set[Double](),
      aStringSet: Set[String] = Set[String](),
      aStructSet: Set[TestStruct] = Set[TestStruct](),
      aListSet: Set[Seq[String]] = Set[Seq[String]](),
      aSetSet: Set[Set[String]] = Set[Set[String]](),
      aMapSet: Set[Map[Int, Int]] = Set[Map[Int, Int]]()) = this(
      aBoolSet,
      aByteSet,
      aI16Set,
      aI32Set,
      aI64Set,
      aDoubleSet,
      aStringSet,
      aStructSet,
      aListSet,
      aSetSet,
      aMapSet,
      Map.empty)
  }

  /**
   * This Proxy trait allows you to extend the TestSets trait with additional state or
   * behavior and implement the read-only methods from TestSets using an underlying
   * instance.
   */
  trait Proxy extends TestSets {
    protected def _underlying_TestSets: TestSets
    override def aBoolSet: Set[Boolean] = _underlying_TestSets.aBoolSet
    override def aByteSet: Set[Byte] = _underlying_TestSets.aByteSet
    override def aI16Set: Set[Short] = _underlying_TestSets.aI16Set
    override def aI32Set: Set[Int] = _underlying_TestSets.aI32Set
    override def aI64Set: Set[Long] = _underlying_TestSets.aI64Set
    override def aDoubleSet: Set[Double] = _underlying_TestSets.aDoubleSet
    override def aStringSet: Set[String] = _underlying_TestSets.aStringSet
    override def aStructSet: Set[TestStruct] = _underlying_TestSets.aStructSet
    override def aListSet: Set[Seq[String]] = _underlying_TestSets.aListSet
    override def aSetSet: Set[Set[String]] = _underlying_TestSets.aSetSet
    override def aMapSet: Set[Map[Int, Int]] = _underlying_TestSets.aMapSet
    override def _passthroughFields = _underlying_TestSets._passthroughFields
  }
}

trait TestSets
  extends ThriftStruct
  with scala.Product11[Set[Boolean], Set[Byte], Set[Short], Set[Int], Set[Long], Set[Double], Set[String], Set[TestStruct], Set[Seq[String]], Set[Set[String]], Set[Map[Int, Int]]]
  with java.io.Serializable {
  import TestSets._

  def aBoolSet: Set[Boolean]
  def aByteSet: Set[Byte]
  def aI16Set: Set[Short]
  def aI32Set: Set[Int]
  def aI64Set: Set[Long]
  def aDoubleSet: Set[Double]
  def aStringSet: Set[String]
  def aStructSet: Set[TestStruct]
  def aListSet: Set[Seq[String]]
  def aSetSet: Set[Set[String]]
  def aMapSet: Set[Map[Int, Int]]

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1 = aBoolSet
  def _2 = aByteSet
  def _3 = aI16Set
  def _4 = aI32Set
  def _5 = aI64Set
  def _6 = aDoubleSet
  def _7 = aStringSet
  def _8 = aStructSet
  def _9 = aListSet
  def _10 = aSetSet
  def _11 = aMapSet

  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returend.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) orElse {
      val _fieldOpt: Option[TField] =
        _fieldId match {
          case 1 =>
            if (aBoolSet ne null) {
              writeABoolSetValue(aBoolSet, _oprot)
              Some(TestSets.ABoolSetField)
            } else {
              None
            }
          case 2 =>
            if (aByteSet ne null) {
              writeAByteSetValue(aByteSet, _oprot)
              Some(TestSets.AByteSetField)
            } else {
              None
            }
          case 3 =>
            if (aI16Set ne null) {
              writeAI16SetValue(aI16Set, _oprot)
              Some(TestSets.AI16SetField)
            } else {
              None
            }
          case 4 =>
            if (aI32Set ne null) {
              writeAI32SetValue(aI32Set, _oprot)
              Some(TestSets.AI32SetField)
            } else {
              None
            }
          case 5 =>
            if (aI64Set ne null) {
              writeAI64SetValue(aI64Set, _oprot)
              Some(TestSets.AI64SetField)
            } else {
              None
            }
          case 6 =>
            if (aDoubleSet ne null) {
              writeADoubleSetValue(aDoubleSet, _oprot)
              Some(TestSets.ADoubleSetField)
            } else {
              None
            }
          case 7 =>
            if (aStringSet ne null) {
              writeAStringSetValue(aStringSet, _oprot)
              Some(TestSets.AStringSetField)
            } else {
              None
            }
          case 8 =>
            if (aStructSet ne null) {
              writeAStructSetValue(aStructSet, _oprot)
              Some(TestSets.AStructSetField)
            } else {
              None
            }
          case 9 =>
            if (aListSet ne null) {
              writeAListSetValue(aListSet, _oprot)
              Some(TestSets.AListSetField)
            } else {
              None
            }
          case 10 =>
            if (aSetSet ne null) {
              writeASetSetValue(aSetSet, _oprot)
              Some(TestSets.ASetSetField)
            } else {
              None
            }
          case 11 =>
            if (aMapSet ne null) {
              writeAMapSetValue(aMapSet, _oprot)
              Some(TestSets.AMapSetField)
            } else {
              None
            }
          case _ => None
        }
      _fieldOpt match {
        case Some(_field) =>
          val _data = Arrays.copyOfRange(_buff.getArray, 0, _buff.length)
          Some(TFieldBlob(_field, _data))
        case None =>
          None
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): TestSets = {
    var aBoolSet: Set[Boolean] = this.aBoolSet
    var aByteSet: Set[Byte] = this.aByteSet
    var aI16Set: Set[Short] = this.aI16Set
    var aI32Set: Set[Int] = this.aI32Set
    var aI64Set: Set[Long] = this.aI64Set
    var aDoubleSet: Set[Double] = this.aDoubleSet
    var aStringSet: Set[String] = this.aStringSet
    var aStructSet: Set[TestStruct] = this.aStructSet
    var aListSet: Set[Seq[String]] = this.aListSet
    var aSetSet: Set[Set[String]] = this.aSetSet
    var aMapSet: Set[Map[Int, Int]] = this.aMapSet
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        aBoolSet = readABoolSetValue(_blob.read)
      case 2 =>
        aByteSet = readAByteSetValue(_blob.read)
      case 3 =>
        aI16Set = readAI16SetValue(_blob.read)
      case 4 =>
        aI32Set = readAI32SetValue(_blob.read)
      case 5 =>
        aI64Set = readAI64SetValue(_blob.read)
      case 6 =>
        aDoubleSet = readADoubleSetValue(_blob.read)
      case 7 =>
        aStringSet = readAStringSetValue(_blob.read)
      case 8 =>
        aStructSet = readAStructSetValue(_blob.read)
      case 9 =>
        aListSet = readAListSetValue(_blob.read)
      case 10 =>
        aSetSet = readASetSetValue(_blob.read)
      case 11 =>
        aMapSet = readAMapSetValue(_blob.read)
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      aBoolSet,
      aByteSet,
      aI16Set,
      aI32Set,
      aI64Set,
      aDoubleSet,
      aStringSet,
      aStructSet,
      aListSet,
      aSetSet,
      aMapSet,
      _passthroughFields)
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is subtracked
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): TestSets = {
    var aBoolSet: Set[Boolean] = this.aBoolSet
    var aByteSet: Set[Byte] = this.aByteSet
    var aI16Set: Set[Short] = this.aI16Set
    var aI32Set: Set[Int] = this.aI32Set
    var aI64Set: Set[Long] = this.aI64Set
    var aDoubleSet: Set[Double] = this.aDoubleSet
    var aStringSet: Set[String] = this.aStringSet
    var aStructSet: Set[TestStruct] = this.aStructSet
    var aListSet: Set[Seq[String]] = this.aListSet
    var aSetSet: Set[Set[String]] = this.aSetSet
    var aMapSet: Set[Map[Int, Int]] = this.aMapSet

    _fieldId match {
      case 1 =>
        aBoolSet = Set[Boolean]()
      case 2 =>
        aByteSet = Set[Byte]()
      case 3 =>
        aI16Set = Set[Short]()
      case 4 =>
        aI32Set = Set[Int]()
      case 5 =>
        aI64Set = Set[Long]()
      case 6 =>
        aDoubleSet = Set[Double]()
      case 7 =>
        aStringSet = Set[String]()
      case 8 =>
        aStructSet = Set[TestStruct]()
      case 9 =>
        aListSet = Set[Seq[String]]()
      case 10 =>
        aSetSet = Set[Set[String]]()
      case 11 =>
        aMapSet = Set[Map[Int, Int]]()
      case _ =>
    }
    new Immutable(
      aBoolSet,
      aByteSet,
      aI16Set,
      aI32Set,
      aI64Set,
      aDoubleSet,
      aStringSet,
      aStructSet,
      aListSet,
      aSetSet,
      aMapSet,
      _passthroughFields - _fieldId)
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is subtracked
   * from the passthroughFields map, if present.
   */
  def unsetABoolSet: TestSets = unsetField(1)

  def unsetAByteSet: TestSets = unsetField(2)

  def unsetAI16Set: TestSets = unsetField(3)

  def unsetAI32Set: TestSets = unsetField(4)

  def unsetAI64Set: TestSets = unsetField(5)

  def unsetADoubleSet: TestSets = unsetField(6)

  def unsetAStringSet: TestSets = unsetField(7)

  def unsetAStructSet: TestSets = unsetField(8)

  def unsetAListSet: TestSets = unsetField(9)

  def unsetASetSet: TestSets = unsetField(10)

  def unsetAMapSet: TestSets = unsetField(11)

  override def write(_oprot: TProtocol) {
    TestSets.validate(this)
    _oprot.writeStructBegin(Struct)
    if (aBoolSet ne null) writeABoolSetField(aBoolSet, _oprot)
    if (aByteSet ne null) writeAByteSetField(aByteSet, _oprot)
    if (aI16Set ne null) writeAI16SetField(aI16Set, _oprot)
    if (aI32Set ne null) writeAI32SetField(aI32Set, _oprot)
    if (aI64Set ne null) writeAI64SetField(aI64Set, _oprot)
    if (aDoubleSet ne null) writeADoubleSetField(aDoubleSet, _oprot)
    if (aStringSet ne null) writeAStringSetField(aStringSet, _oprot)
    if (aStructSet ne null) writeAStructSetField(aStructSet, _oprot)
    if (aListSet ne null) writeAListSetField(aListSet, _oprot)
    if (aSetSet ne null) writeASetSetField(aSetSet, _oprot)
    if (aMapSet ne null) writeAMapSetField(aMapSet, _oprot)
    _passthroughFields.values foreach { _.write(_oprot) }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    aBoolSet: Set[Boolean] = this.aBoolSet,
    aByteSet: Set[Byte] = this.aByteSet,
    aI16Set: Set[Short] = this.aI16Set,
    aI32Set: Set[Int] = this.aI32Set,
    aI64Set: Set[Long] = this.aI64Set,
    aDoubleSet: Set[Double] = this.aDoubleSet,
    aStringSet: Set[String] = this.aStringSet,
    aStructSet: Set[TestStruct] = this.aStructSet,
    aListSet: Set[Seq[String]] = this.aListSet,
    aSetSet: Set[Set[String]] = this.aSetSet,
    aMapSet: Set[Map[Int, Int]] = this.aMapSet,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields): TestSets =
    new Immutable(
      aBoolSet,
      aByteSet,
      aI16Set,
      aI32Set,
      aI64Set,
      aDoubleSet,
      aStringSet,
      aStructSet,
      aListSet,
      aSetSet,
      aMapSet,
      _passthroughFields)

  override def canEqual(other: Any): Boolean = other.isInstanceOf[TestSets]

  override def equals(other: Any): Boolean =
    _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
      _passthroughFields == other.asInstanceOf[TestSets]._passthroughFields

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)

  override def productArity: Int = 11

  override def productElement(n: Int): Any = n match {
    case 0 => this.aBoolSet
    case 1 => this.aByteSet
    case 2 => this.aI16Set
    case 3 => this.aI32Set
    case 4 => this.aI64Set
    case 5 => this.aDoubleSet
    case 6 => this.aStringSet
    case 7 => this.aStructSet
    case 8 => this.aListSet
    case 9 => this.aSetSet
    case 10 => this.aMapSet
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "TestSets"
}